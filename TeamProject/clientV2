//Team Project Smith, Kreiser, Graham
//August 22, 2018

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <sstream>
#include <vector>

// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
// #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "4444"

void processCommand(std::vector<char> buffer, std::vector<char>& outputBuffer);
void listFiles(std::vector<char>& outputBuffer, std::string directory = "C:\\*");

int __cdecl main(void)
{
	WSADATA wsaData;
	int iResult;

	SOCKET ListenSocket = INVALID_SOCKET;
	SOCKET ServerSocket = INVALID_SOCKET;

	struct addrinfo *result = NULL;
	struct addrinfo hints;

	int iSendResult;

	char recvbuf[DEFAULT_BUFLEN];
	int recvbuflen = DEFAULT_BUFLEN;

	// Initialize Winsock
	iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
	if (iResult != 0) 
	{
		std::cout << "WSAStartup failed with error: " << iResult << std::endl;
		return 1;
	}

	ZeroMemory(&hints, sizeof(hints));
	hints.ai_family = AF_INET;
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_protocol = IPPROTO_TCP;
	hints.ai_flags = AI_PASSIVE;

	// Resolve the server address and port
	iResult = getaddrinfo(NULL, DEFAULT_PORT, &hints, &result);
	if (iResult != 0) 
	{
		std::cout << "getaddrinfo failed with error: " << iResult << std::endl;
		WSACleanup();
		return 1;
	}

	// Create a SOCKET for connecting to server
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
	if (ListenSocket == INVALID_SOCKET) 
	{
		std::cout << "socket failed with error: " << WSAGetLastError() << std::endl;
		freeaddrinfo(result);
		WSACleanup();
		return 1;
	}

	// Setup the TCP listening socket
	iResult = bind(ListenSocket, result->ai_addr, (int)result->ai_addrlen);
	if (iResult == SOCKET_ERROR) 
	{
		std::cout << "bind failed with error: " << WSAGetLastError() << std::endl;
		freeaddrinfo(result);
		closesocket(ListenSocket);
		WSACleanup();
		return 1;
	}

	freeaddrinfo(result);

	iResult = listen(ListenSocket, SOMAXCONN);
	if (iResult == SOCKET_ERROR) 
	{
		std::cout << "listen failed with error: " << WSAGetLastError() << std::endl;
		closesocket(ListenSocket);
		WSACleanup();
		return 1;
	}

	// Accept a client socket
	ServerSocket = accept(ListenSocket, NULL, NULL);
	if (ServerSocket == INVALID_SOCKET)
	{
		std::cout << "accept failed with error: " << WSAGetLastError() << std::endl;
		closesocket(ListenSocket);
		WSACleanup();
		return 1;
	}

	// No longer need listening socket
	closesocket(ListenSocket);
	// Receive until the peer shuts down the connection
	do {
		std::vector<char> inputBuffer(5000);
		std::vector<char> outputBuffer;
		iResult = recv(ServerSocket, inputBuffer.data(), inputBuffer.size(), 0);
		std::cout << "data has been received."<< std::endl;
		if (iResult != -1)
		{
			inputBuffer.resize(iResult);
		}
		if (iResult != 0)
		{
			processCommand(inputBuffer, outputBuffer);
			std::cout << std::endl;
			iResult = send(ServerSocket, outputBuffer.data(), outputBuffer.size(), 0);
		}
		else
		{
			break;
		}
	} while (true);

	// shutdown the connection since we're done
	iResult = shutdown(ServerSocket, SD_SEND);
	if (iResult == SOCKET_ERROR) 
	{
		std::cout << "shutdown failed with error: " << WSAGetLastError() << std::endl;
		closesocket(ServerSocket);
		WSACleanup();
		return 1;
	}

	// cleanup
	closesocket(ServerSocket);
	WSACleanup();
	return 0;
}

void processCommand(std::vector<char> buffer, std::vector<char>& outputBuffer)
{
	std::string command = buffer.data();
	switch (buffer[0])
	{
	case 'd':
		listFiles(outputBuffer);
		break;
	}
}
//Function to build a basic file structure outline of the client machine
void listFiles(std::vector<char>& outputBuffer, std::string directory)
{
	WIN32_FIND_DATA fileData;
	__int64 filesize = 0;
	HANDLE hFind = INVALID_HANDLE_VALUE;
	//Locates the file information for the specificed directory
	//Default will be the C:\ Drive
	hFind = FindFirstFile(directory.c_str(), &fileData);
	do
	{
		if (fileData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
		{
			std::string build;
			build = build + "  " + fileData.cFileName + "   <DIR>\n";
			for (auto& element : build)
			{
				outputBuffer.push_back(element);
			}
		}
		else
		{
			LARGE_INTEGER data;
			data.LowPart = fileData.nFileSizeLow;
			data.HighPart = fileData.nFileSizeHigh;
			filesize = data.QuadPart;
			std::string build;
			build = build + "  " + fileData.cFileName + "   ";
			build += static_cast<std::ostringstream*>(&(std::ostringstream() << filesize))->str();
			build += " bytes\n";
			for (auto& element : build)
			{
				outputBuffer.push_back(element);
			}
		}
	} while (FindNextFile(hFind, &fileData) != 0);
}
